{"version":3,"sources":["ChartComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["ChartComponent","stringDate","Date","toLocaleString","this","props","data","sort","a","b","parse","timestamp","map","t","y","value","datasets","label","getDataPoints","borderColor","backgroundColor","pointRadius","pointHitRadius","pointHoverRadius","fill","lineTension","borderWidth","options","title","display","text","location","sensorName","tooltips","mode","intersect","callbacks","tooltipItem","yLabel","hover","layout","padding","left","right","top","bottom","scales","xAxes","type","time","unit","tooltipFormat","displayFormats","minute","yAxes","ticks","min","max","stepSize","Component","Temperature","state","temperatures","fetch","method","headers","Token","then","response","json","setState","length","style","height","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f3cfc83c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport './ChartComponent.css';\r\n\r\nexport class ChartComponent extends Component {\r\n    getTimestamp(stringDate) {\r\n        return new Date(stringDate)\r\n            .toLocaleString();\r\n    }\r\n\r\n    getDataPoints() {\r\n        return this.props.data\r\n            .sort((a, b) => (Date.parse(a.timestamp) > Date.parse(b.timestamp)) ? 1 : -1)\r\n            .map(t => ({ t: t.timestamp, y: t.value }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Line\r\n                data={{\r\n                    datasets: [{\r\n                        label: 'Temperatura w °C',\r\n                        data: this.getDataPoints(),\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'red',\r\n                        pointRadius: 0,\r\n                        pointHitRadius: 0,\r\n                        pointHoverRadius: 0,\r\n                        fill: false,\r\n                        lineTension: 0.4,\r\n                        borderWidth: 3,\r\n                    }]\r\n                }}\r\n                options={{\r\n                    title: {\r\n                        display: true,\r\n                        text: `Temperatura w ${this.props.data[0].location}, sensor: ${this.props.data[0].sensorName}`\r\n                    },\r\n                    tooltips: {\r\n                        mode: 'index',\r\n                        intersect: false,\r\n                        callbacks: {\r\n                            label: function (tooltipItem, data) {\r\n                                return `${tooltipItem.yLabel} °C`;\r\n                            }\r\n                        }\r\n                    },\r\n                    hover: {\r\n                        mode: 'index',\r\n                        intersect: false,\r\n                    },\r\n                    layout: {\r\n                        padding: {\r\n                            left: 50,\r\n                            right: 100,\r\n                            top: 50,\r\n                            bottom: 100\r\n                        }\r\n                    },\r\n                    scales: {\r\n                        xAxes: [{\r\n                            type: 'time',\r\n                            display: true,\r\n                            time: {\r\n                                unit: 'minute',\r\n                                tooltipFormat: 'HH:mm:ss',\r\n                                displayFormats: {\r\n                                    minute: 'HH:mm',\r\n                                }\r\n                            },\r\n                        }],\r\n                        yAxes: [{\r\n                            display: true,\r\n                            ticks: {\r\n                                min: -40,\r\n                                max: 60,\r\n                                stepSize: 10\r\n                            }\r\n                        }]\r\n                    },\r\n                }}\r\n            />\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ChartComponent } from './ChartComponent';\r\n\r\nimport './App.css';\r\n\r\nconst token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.CNHY4yVQsvkeAQVNU29sYj-7OEPIjdRr4ursq3yF5sg';\r\n\r\nexport default class Temperature extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { temperatures: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://telemedycyna.azurewebsites.net/temperature', {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Token: token,\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(json => this.setState({ temperatures: json }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.temperatures.length ? (\r\n                    <div style={{ height: '500px' }}>\r\n                        <ChartComponent data={this.state.temperatures} />\r\n                    </div>\r\n                ) : (\r\n                    <div>Loading...</div>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}